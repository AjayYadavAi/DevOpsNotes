    1  sudo yum install -y yum-utils
    2  sudo yum-config-manager     --add-repo     https://download.docker.com/linux/centos/docker-ce.repo
    3   sudo yum install docker-ce docker-ce-cli containerd.io
    4  systemctl status docker
    5  systemctl start docker
    6  systemctl status docker
    7  history
    8  docker --version
    9  docker pull ubuntu
   10  docker images
   11  docker image ls
   12  docker pull ubuntu:18.04
   13  docker images
   14  docker rmi ubuntu:18.04
   15  docker pull centos
   16  docker container run -it --name c1 -d ubuntu
   17  docker ps
   18  docker container ls
   19  docker container run -it --name c1 -d centos
   20  docker container run -it --name c2 -d centos
   21  docker container ls
   22  docker stop c1
   23  docker container ls
   24  docker ps -a
   25  docker container ls --all
   26  history
   27  docker start c1
   28  docker container ls
   29  docker kill c1
   30  docker ps -a
   31  docker restart c1
   32  docker container ls
   33  docker stop c1
   34  docker rm c1
   35  docker ps -a
   36  docker rm -f c2
   37  docker container ls --all
   38  docker container run -it --name c1 -d centos
   39  docker container ls --all
   40  docker rmi centos
   41  docker stop c1
   42  docker rmi centos
   43  docker stop c1
   44  docker rmi centos
   45  docker rm c1
   46  docker rmi centos
   47  docker container -it run --name c1 -d ubuntu
   48  docker container run -it --name c1 -d ubuntu
   49  docker container ls
   50  docker exec -it c1 bash
   51  docker ps
   52  docker commit c1 webimg
   53  docker images
   54  docker container run -itd --name c2 webimg
   55  docker exec -it c2 bash
   56  docker images
   57  docker ps -a
   58  docker rm -f c1 c2
   59  docker container run -itd --name webserver -p 80:80 webimg
   60  docker container ls
   61  docker exec -it webserver bash
   62  vi test.html
   63  docker cp test.html webserver:/var/www/html
   64  docker exec -it webserver bash
   65  docker stats webserver
   66  docker top webserver
   67  history
   68  sudo docker run -m 4m -dit --name web1 nginx
   69  sudo docker run -m 8m -dit --name web1 nginx
   70  docker stats web1
   71  ls /var/lib/docker/
   72  docker images
   73  docker save webimg > myimg.tar
   74  ls
   75  docker rm -f $(docker ps -a -q)
   76  docker rmi webimg
   77  ls
   78  docker images
   79  docker load <myimg.tar
   80  docker images
   81  docker container run -itd --name c1 webimg
   82  docker container ls
   83  docker export c1 mywebimg
   84  docker export c1 -o  mywebimg
   85  docker export c1 -o  mywebimg.tar
   86  ls
   87  docker rm -f c1
   88  docker rmi webimg nginx ubuntu
   89  docker images
   90  ls
   91  docker import mywebimg.tar myimg
   92  docker images
   93  docker load < mywebimg.tar
   94  vi Dockerfile
   95  docker build -t my-java-app .
   96  docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=pass -d mysql:8.0
   97  docker ps
   98  docker exec -it some-mysql bash
   99  docker login
  100  docker logout
  101  docker login
  102  docker images
  103  docker rmi 9dac656d25e5
  104  docker ps
  105  docker ps -a
  106  docker rm d8984ae6f588
  107  docker rmi 9dac656d25e5
  108  docker images
  109  docker push myimg
  110  docker ps
  111  docker commit some-mysql ramansharma95/mydb
  112  docker images
  113  docker push ramansharma95/mydb
  114  docker list
  115  docker --help
  116  docker images
  
  -----------Registry-------------
  1. Create a container with registry docker image

 docker container run -d -p 5000:5000 --name local_registry registry

2. Access the container on 5000 port with your serverip ( system's IP) 

 http://<serverip>:5000/v2/_catalog

3. Inspect the container

 docker container inspect local_registry

4. Clone the ubuntu image to localhost:5000/ubuntu:latest

 docker image tag ubuntu localhost:5000/ubuntu:latest

5. Push the image to docker registry

 docker image push localhost:5000/ubuntu


6. Pull the image with following command ( you can remove the image first and then you can run below command to restore the image)

 docker image pull localhost:5000/ubuntu
 
 ------------------------Storage------------------
 
docker volume create demo-vol
docker volume ls     //to list the volumes
docker run -it --mount source=demo-vol,destination=/app -d ubuntu
docker run -it --mount source=demo-vol,destination=/test --mount source=demo-vol1,destination=/test1 -d ubuntu

---------------commands---------
 docker volume --help
  295  docker volume ls
  296  docker volume prune
  297  docker volume ls
  298  docker volume create demo-vol
  299  docker volume ls
  300  ls /var/lib//docker/
  301  ls /var/lib//docker/volumes/
  302  docker volume rm demo-vol
  303  ls /var/lib//docker/volumes/
  304  docker volume create demo-vol
  305  docker volume ls
  306  ls /var/lib//docker/volumes/
  307  ls /var/lib//docker/volumes/demo-vol/
  308  ls /var/lib//docker/volumes/demo-vol/_data/
  309  docker rm -f c1
  310  docker container run -it --name c1 --mount source=demo-vol,destination=/app -d ubuntu
  311  docker exec -it c1 bash
  312  ls /var/lib//docker/volumes/demo-vol/_data/
  313  docker rm -f c1
  314  ls /var/lib//docker/volumes/demo-vol/_data/
  315  docker container run -itd --name c2 --mount source=demo-vol,destination=/demo ubuntu
  316  docker exec -it c2
  317  docker exec -it c2 bash
  318  docker container run -itd --name c3 --mount source=demo-vol,destination=/demo1 ubuntu
  319  docker exec -it c3 bash
  320  ls /var/lib//docker/volumes/demo-vol/_data/
  321  touch /var/lib//docker/volumes/demo-vol/_data/5
  322  ls /var/lib//docker/volumes/demo-vol/_data/
  323  docker exec -it c3 bash
  324  docker volume rm demo-vol
  325  ls
  326  rm -ifr /var/lib/docker/volumes/demo-vol/_data/
  327  ls /var/lib//docker/volumes/demo-vol/_data/
  328  docker exec -it c2 bash
  329  ls /var/lib//docker/volumes/demo-vol/_data/
  330  mkdir /var/lib//docker/volumes/demo-vol/_data
  331  ls /var/lib//docker/volumes/demo-vol/_data/
  332  touch /var/lib//docker/volumes/demo-vol/_data/1
  333  docker exec -it c2 bash
  334  docker rm -f c2 c3
  335  docker volume prune
  336  docker volume ls

---------------------------------

----------Docker Bind Mount Example

docker run -it -v /home/ubuntu/mount:/demo -d ubuntu

---commands----
mkdir mydir
  343  docker container run -it -d --name c4 -v /home/centos/mydir:/app ubuntu
  344  docker exec -it c4 bash
  345  ls mydir/
  346  docker container inspect c4
  347  cd mydir/`

  348  cd mydir/
  349  touch 5 6
  350  ls
  351  docker exec -it c4 bash

---------------




------------------------Assignment-------------------------------------------
1.	Create a container called webserver with ubuntu docker image. Ans :-docker contaienr run -itd --name webserver ubuntu
2.	Install apache server in the container(webserver) Ans:- docker exec -it webserver bash , then apt update , apt install apache2 -y
3.	Start apache service in the container   Ans:- service apache2 start
4.	Access apache default page on the web browser, Ans docker commit webserver webimg, docker container run -itd --name c1 -p 80:80 webimg
5.	Create a new webpage myapp.html on the host machine and copy it to /var/www/html folder in webserver container. Ans docker cp myapp.html /var/www/html/
6.	Access myapp.html page on the browser Ans: publicip:80
7.	Check how much memory and cpu is consumed by web server containers. docker stats c1
8.	Stop the container and verify that you are not able to access apache website on browser. docker stop c1
9.	Start container and now you should be able to access the apache website. docker start c1
10.	Remove  webserver container docker rm -f c1

